#!/usr/bin/env python

import curses
import curses.wrapper
import sys

from mazeweb.walker import MazeWalker


class MazeMapper(object):
    MAPPERS = {}
    @classmethod
    def mapper(self, walls):
        """A decorator for registering a ``MazeMapper`` subclass as the mapper
        for a maze with the specified number of walls.

        :param int walls: The number of walls for which to register the mapper.

        :return: a decorator

        :raises ValueError: if the decorated object is not a subclass of
            ``MazeMapper``
        """
        def inner(klass):
            if not issubclass(klass, self):
                raise ValueError(klass)
            self.MAPPERS[walls] = klass

        return inner

    @classmethod
    def for_walker(self, walker):
        """Returns a mapper for a specific :class:`~mazeweb.walker.MazeWalker`.

        :param mazeweb.walker.MazeWalker walker: The MazeWalker for which to
            create a mapper.

        :raises KeyError: if the maze type is not supported
        """
        return self.MAPPERS[len(walker.maze.Wall.WALLS)](walker)

    def __init__(self, walker):
        """Constructs a mapper for the specified maze walker.

        Do not call this constructor directly. Rather, use
        :meth:`MazeMapper.for_maze` as a factory method.

        :param mazeweb.walker.MazeWalker walker: The maze walker whose maze to
            map.
        """
        self.walker = walker

        self.layout = tuple(
            tuple(
                tuple(
                    False
                        if square == ' ' else
                    True
                        if square == '#' else
                    self.DIRECTIONS[int(square, 10)]
                        if square in '0123456789' else
                    square
                    for square in line)
                for line in room)
            for room in self.LAYOUTS)

    def room_to_layout(self, room_pos):
        """Returns the layout for the room at room_pos.

        This method must be implemented if ``len(self.layout)`` is not ``1``.

        :param room_pos: The room position.
        :type room_pos: (int, int)

        :return: an item from ``self.layout`` for the room
        """
        if len(self.layout) == 1:
            return self.layout[0]
        else:
            raise NotImplementedError()

    def world_to_room(self, world_pos):
        """Returns the room position and position within the room from a world
        coordinate.

        :param world_pos: The world position.
        :type world_pos: (int, int)

        :return: the tuple ``(room_pos, inner_pos)``
        """
        raise NotImplementedError()

    def is_blocked(self, world_pos):
        """Returns whether the specified world position is blocked.

        :param world_pos: The world coordinate to check.
        :type world_pos: (int, int)

        :return ``True`` if the position is blocked, ``False`` if it is not and
            ``None`` if it is not known
        """
        # Get the room position
        room_pos, (ix, iy) = self.world_to_room(world_pos)

        # If the room is unknown, we cannot say anything
        try:
            if getattr(self.walker.maze[room_pos], 'identifier', None) is None:
                return None
        except IndexError as e:
            return None

        # Get the layout index
        layout = self.room_to_layout(room_pos)

        # Get the value for the square
        value = layout[iy][ix]

        # If the value is a True or False, it is a square that has a static
        # value, otherwise we must see if the specified room has a wall
        if value is False or value is True or value is None:
            return value
        else:
            try:
                return not int(value) in self.walker.maze[room_pos]
            except ValueError:
                return None


from maze.tri import TriMaze

@MazeMapper.mapper(len(TriMaze.Wall.WALLS))
class TriMazeMapper(MazeMapper):
    DIRECTIONS = (TriMaze.Wall.HORIZONTAL, TriMaze.Wall.DIAGONAL_2,
        TriMaze.Wall.DIAGONAL_1)
    LAYOUTS = (
        (
            '##000##+',
            '-2   1++',
            '--2 1+++',
            '---#++++'),
        (
            '---#++++',
            '--1 2+++',
            '-1   2++',
            '##000##+'))

    def room_to_layout(self, room_pos):
        return self.layout[sum(room_pos) & 1]

    def world_to_room(self, world_pos):
        room_x = 2 * (world_pos[0] // len(self.LAYOUTS[0][0]))
        room_y = world_pos[1] // len(self.LAYOUTS[0])

        layout = self.layout[room_y & 1]

        inner_x = world_pos[0] % len(self.LAYOUTS[0][0])
        inner_y = world_pos[1] % len(self.LAYOUTS[0])

        if layout[inner_y][inner_x] == '-':
            room_x -= 1
            inner_x += len(self.LAYOUTS[0][0]) // 2
        elif layout[inner_y][inner_x] == '+':
            room_x += 1
            inner_x -= len(self.LAYOUTS[0][0]) // 2

        return (room_x, room_y), (inner_x, inner_y)


from maze.quad import Maze

@MazeMapper.mapper(len(Maze.Wall.WALLS))
class QuadMazeMapper(MazeMapper):
    DIRECTIONS = (Maze.Wall.UP, Maze.Wall.LEFT, Maze.Wall.RIGHT, Maze.Wall.DOWN)
    LAYOUTS = (
        (
            '#33#',
            '1  2',
            '#00#'),)

    def world_to_room(self, world_pos):
        room_pos = (
            world_pos[0] // len(self.LAYOUTS[0][0]),
            world_pos[1] // len(self.LAYOUTS[0]))
        inner_pos = (
            world_pos[0] % len(self.LAYOUTS[0][0]),
            world_pos[1] % len(self.LAYOUTS[0]))
        return (room_pos, inner_pos)



def put_pixel(win, x, y, ch, attr = 0):
    """Updates a single character on screen.

    This is a wrapper around win.addch which protects agains curses.error and
    also optimises the calls so that curses.error, which is slightly
    time-consuming, is not normally raised.

    See :func:`curses.win.addch`.
    """
    my, mx = win.getmaxyx()
    if (False
            or x < 0
            or x >= mx - 1
            or y < 0
            or y > my):
        return
    try:
        win.addch(y, x, ch, attr)
    except curses.error as e:
        pass


_view_offset = None

def center_on(win, world_pos):
    """Centers the screen on a position.

    If the position is near a wall, world_pos may not necessarily be in the
    centre of the screen.

    :param world_pos: The world coordinate onto which to try to center the
        virtual view.
    :type world_pos: (int, int)
    """
    global _view_offset

    my, mx = win.getmaxyx()
    wx, wy = world_pos

    MARGIN = 5

    ox = wx - mx // 2
    if ox < -MARGIN:
        ox = -MARGIN

    oy = wy - my // 2
    if oy < -MARGIN:
        oy = -MARGIN

    _view_offset = (
        ox,
        oy)

def screen_to_world(screen_pos):
    """
    Transforms a screen coordinate to a world coordinate.

    The return value may not be inside the maze.

    @param screen_pos
        The screen position to convert.
    @return the corresponding world coordinate
    """
    global _view_offset
    return tuple(sp + o for sp, o in zip(screen_pos, _view_offset))


def world_to_screen(world_pos):
    """
    Transforms a world coordinate to a screen coordinate.

    @param world_pos
        The world position to convert.
    @return the corresponding screen coordinate
    """
    global _view_offset
    return tuple(wp - o for wp, o in zip(world_pos, _view_offset))


def paint(win, mapper, hrange, vrange):
    """Paints all known rooms of a maze.

    The current room and its neighbours are painted highlighted, and other rooms
    with a less distinct colour.

    :param win: The curses window to use.

    :param MazeMapper mapper: The MazeMapper whose cached rooms to paint.

    :param int hrange: The horizontal range of the maze to paint.

    :param int vrange: The vertical range of the maze to paint.
    """
    # Make sure the ranges are lists
    hrange, vrange = list(hrange), list(vrange)

    for sx in hrange:
        for sy in vrange:
            world_pos = screen_to_world((sx, sy))

            # Determine the corresponding room
            room_pos, inner_pos = mapper.world_to_room(world_pos)

            # Determine whether the world position is blocked, and whether the
            # room is reachable
            blocked = mapper.is_blocked(world_pos)
            reachable = mapper.walker.is_reachable(room_pos)

            if blocked is True:
                flags = curses.A_REVERSE
                character = ' '
            elif blocked is False:
                flags = curses.A_NORMAL
                character = ' '
            else:
                flags = curses.A_NORMAL
                character = '%'

            put_pixel(win,
                sx, sy,
                character,
                flags | curses.color_pair(0 if reachable else 1))


def wrapped_main(win):
    curses.curs_set(0)
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_WHITE, -1)

    try:
        walls = int(sys.argv[1])
    except IndexError:
        walls = 4

    # Create a maze walker and mapper
    my, mx = win.getmaxyx()
    walker = MazeWalker(
        width = mx // 4,
        height = my // 3,
        walls = walls)
    mapper = MazeMapper.for_walker(walker)

    wposition = (len(mapper.layout[0][0]) // 2, len(mapper.layout[0]) // 2)

    while True:
        # The mapping from curses keys to directions
        DIRECTIONS = {
            curses.KEY_LEFT: (-1, 0),
            curses.KEY_UP: (0, -1),
            curses.KEY_RIGHT: (1, 0),
            curses.KEY_DOWN: (0, 1)}

        # Paint the maze
        center_on(win, tuple(p for p in wposition))
        paint(win, mapper,
            range(mx),
            range(my))

        room_pos, inner_pos = mapper.world_to_room(wposition)

        # Add the marker
        screen_pos = world_to_screen(wposition)
        put_pixel(win,
            screen_pos[0], screen_pos[1],
            '#')
        win.refresh()

        c = win.getch()

        if c in (27, curses.KEY_EXIT):
            # Escape pressed
            break

        elif c in DIRECTIONS:
            wnext_position = tuple(wxy + direction
                for wxy, direction in zip(wposition, DIRECTIONS[c]))
            rnext_room, inner_pos = mapper.world_to_room(wnext_position)

            # Try to move the marker
            blocked = mapper.is_blocked(wnext_position)
            if not blocked is False:
                continue

            # If the marker reaches a new room, we must update the maze walker
            if rnext_room != walker.position:
                # Walking between rooms
                try:
                    walker.position = rnext_room
                except:
                    curses.flash()
                    continue

            wposition = wnext_position


def main():
    curses.wrapper(wrapped_main)


if __name__ == '__main__':
    main()
