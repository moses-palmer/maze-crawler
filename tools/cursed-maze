#!/usr/bin/env python

import curses
import curses.wrapper
import sys

from cursedmaze import MazeWalker

# The size of a room in characters described as (width, height)
ROOM_SIZE = (4, 3)

# The mapping from curses keys to directions
DIRECTIONS = {
    curses.KEY_LEFT: (-1, 0),
    curses.KEY_UP: (0, 1),
    curses.KEY_RIGHT: (1, 0),
    curses.KEY_DOWN: (0, -1)}


def paint(win, walker, hrange, vrange):
    """
    Paints all known rooms of a maze.

    The current room and its neighbours are painted highlighted, and other rooms
    with a less distinct colour.

    @param win
        The curses window to use.
    @param walker
        The MazeWalker whose cached rooms to paint.
    @param hrange, vrange
        The horizontal and vertical ranges of the maze to paint.
    """
    my, mx = win.getmaxyx()

    for x in hrange:
        for y in vrange:
            room = walker[(x, y)]

            # Ignore unknown rooms
            if not room:
                continue

            # Get the directions in which we have doors
            doors = set(d[1] for d in room[1])
            left = (-1, 0) in doors
            up = (0, 1) in doors
            right = (1, 0) in doors
            down = (0, -1) in doors

            is_reachable = walker.is_reachable((x, y))

            # Iterate over all characters of the room
            for rx in range(ROOM_SIZE[0]):
                for ry in range(ROOM_SIZE[1]):
                    if rx == 0:
                        if ry == 0:
                            # Top left corner
                            filled = True
                        elif ry == ROOM_SIZE[1] - 1:
                            # Bottom left corner
                            filled = True
                        else:
                            # Left wall
                            filled = not left
                    elif rx == ROOM_SIZE[0] - 1:
                        if ry == 0:
                            # Top right corner
                            filled = True
                        elif rx == ROOM_SIZE[0] - 1 and ry == ROOM_SIZE[1] - 1:
                            # Bottom right corner
                            filled = True
                        else:
                            # Right wall
                            filled = not right
                    elif ry == 0:
                        # Top wall
                        filled = not up
                    elif ry == ROOM_SIZE[1] - 1:
                        # Bottom wall
                        filled = not down
                    else:
                        # Inside room
                        filled = False

                    win.addch(
                        my - ((y + 1) * ROOM_SIZE[1] - ry),
                        x * ROOM_SIZE[0] + rx,
                        ' ' if is_reachable else '#',
                        (curses.A_REVERSE if filled else curses.A_NORMAL)
                            | curses.color_pair(
                                0 if is_reachable else 1))


def wrapped_main(win):
    curses.curs_set(0)
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_WHITE, -1)

    # Create a maze walker
    my, mx = win.getmaxyx()
    walker = MazeWalker(
        width = mx // ROOM_SIZE[0],
        height = my // ROOM_SIZE[1])

    position = tuple(int(position * room_size + room_size * 0.5)
        for position, room_size in zip(walker.position, ROOM_SIZE))

    while True:
        # Paint the maze
        paint(win, walker, range(walker.width), range(walker.height))
        win.addch(my - position[1] - 1, position[0], '#')
        win.refresh()

        c = win.getch()

        if c in (27, curses.KEY_EXIT):
            # Escape pressed
            break

        elif c in DIRECTIONS:
            next_position = tuple(position + direction
                for position, direction in zip(position, DIRECTIONS[c]))
            next_room = tuple(position // room_size
                for position, room_size in zip(next_position, ROOM_SIZE))

            if next_room == walker.position:
                # Walking inside a room
                rx, ry = (position % room_size
                    for position, room_size in zip(next_position, ROOM_SIZE))

                # All corners have walls
                if rx in (0, ROOM_SIZE[0] - 1) and ry in (0, ROOM_SIZE[1] - 1):
                    continue

                if rx == 0 and not any(w[1] == (-1, 0)
                        for w in walker[walker.current_room][1]):
                    continue
                elif rx == ROOM_SIZE[0] - 1 and not any(w[1] == (1, 0)
                        for w in walker[walker.current_room][1]):
                    continue

                if ry == 0 and not any(w[1] == (0, -1)
                        for w in walker[walker.current_room][1]):
                    continue
                elif ry == ROOM_SIZE[1] - 1 and not any(w[1] == (0, 1)
                        for w in walker[walker.current_room][1]):
                    continue

            else:
                # Walking between rooms
                try:
                    walker.position = next_room
                except:
                    curses.flash()
                    continue

            position = next_position


def main():
    curses.wrapper(wrapped_main)


if __name__ == '__main__':
    main()
